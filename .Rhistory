ggplot(aes(x = ForestedAreaDec , y = avgAirQuality,
col = cut(avgAirQuality, breaks = c(0, 50, 100, 150, 200, 300, Inf), include.lowest = FALSE),
alpha = 0.8,
size = Population)) +
geom_point() +
scale_color_manual(values = c("#8cc33e",
"#fec922",
"#fd7503",
"#ff0305",
"#a8004c",
"#7c021d"),
labels = c("Good",
"Moderate",
"Unhealthy for \nSensitive Groups",
"Unhealthy",
"Very Unhealthy",
"Hazardous")) +
scale_size_continuous(breaks = c(30000000, 100000000, 300000000, 500000000, 1000000000),
labels = c("30M", "100M", "300M", "500M", "1B"),
range = c(2, 6)) +
geom_smooth(method = "lm", se = FALSE, aes(group = 1), col = "grey12", linetype = 4) +
labs(x = "Forested Area (%)", y = "Average Air Quality (aqi)", title = "Forested Area vs Air Quality \nfor Different Countries", col = "Air Quality Index", size = "Population") +
guides(alpha=FALSE, size = guide_legend(override.aes = list(linetype = 0)),
color = guide_legend(override.aes = list(color = c("#8cc33e",
"#fec922",
"#fd7503",
"#ff0305",
"#a8004c",
"#7c021d")))) +
theme_minimal()
countryDataTemp <- countryData %>%
mutate(ForestedAreaDec = ifelse(is.na(`Forested Area (%)`), NA, as.numeric(sub("%", "", `Forested Area (%)`))))
cor1 <- cor(countryDataTemp$ForestedAreaDec, countryData$avgAirQuality, use = "complete.obs")
cat("The correlation between these two variables is ", cor1, ".", " That is a moderate negative linear relationship.", sep = "")
maxEC <- max(countryData$electricityConsumption, na.rm = TRUE)
minEC <- min(countryData$electricityConsumption, na.rm = TRUE)
countryData %>%
ggplot(aes(x = (electricityConsumption / Population) * 1000000, y = MtCO2_percapita,
alpha = 0.8,)) +
geom_point() +
geom_smooth(method = "lm", se=FALSE, col="red", linetype = 4) +
scale_x_log10() +
scale_y_log10() +
labs(x = "Net Electricity Consumption per capita (BkWh/person)", y = "CO2 Emissions per capita (tCO2/person)",
title = "Electricity Consumption per capita vs CO2 Emissions per capita \nfor Different Countries") +
guides(alpha=FALSE) +
theme_minimal()
cor2 <- cor(countryData$electricityConsumption / countryData$Population, countryData$MtCO2_percapita, use = "complete.obs")
cat("The correlation between these two variables is ", cor2, ".", " That is a relatively strong positive linear relationship.", sep = "")
countryData %>%
mutate(popRatio = Urban_population/Population) %>%
ggplot(aes(x = popRatio * 100, y = MtCO2_percapita,
alpha = 0.8)) +
geom_point(size = 2) +
geom_smooth(method = "lm", se=FALSE, col="red", linetype = 4) +
scale_x_log10() +
scale_y_log10() +
labs(x = "Urban Population (%)", y = "CO2 Emissions per capita (tCO2/person)",
title = "Urban Population vs CO2 Emissions per capita \nfor Different Countries") +
guides(alpha=FALSE) +
theme_minimal()
cor3 <- cor(countryData$Urban_population / countryData$Population , countryData$MtCO2_percapita, use = "complete.obs")
cat("The correlation between these two variables is ", cor3, ".", " That is a moderate positive linear relationship.", sep = "")
countryData %>%
ggplot(aes(x = MtCO2_percapita , y = `Fertility Rate`,
alpha = 0.8)) +
geom_point(size = 2) +
geom_smooth(method = "lm", se = FALSE, col = "red", linetype = 4) +
scale_y_log10() +
scale_x_log10() +
labs(x = "CO2 Emissions per capita (MtCO2/person)", y = "Fertility Rate (children per woman)",
title = "CO2 Emissions per capita vs Fertitility Rate \nfor Different Countries") +
guides(alpha=FALSE) +
theme_minimal()
cor4 <- cor(countryData$MtCO2_percapita , countryData$`Fertility Rate`, use = "complete.obs")
cat("The correlation between these two variables is ", cor4, ".", " That is a moderate negative linear relationship.", sep = "")
# Creating a new dataset for model preparation
model_data <- merged_data %>%
# Convert percentage strings to numeric
mutate(`Forested Area (%)` = as.numeric(gsub("%", "", `Forested Area (%)`)) / 100,
electricityConsumption = as.numeric(electricityConsumption),
Urban_population = as.numeric(Urban_population)) %>%
# Handle missing data with median imputation for columns used in the model
mutate_at(vars(electricityConsumption, Urban_population, `Forested Area (%)`),
~ ifelse(is.na(.), median(., na.rm = TRUE), .)) %>%
# Drop rows where the target variable is missing
drop_na(MtCO2_Emissions) %>%
# Remove the specific outlier with MtCO2_Emissions > 5000
filter(MtCO2_Emissions <= 500)
# Create interaction terms
model_data <- model_data %>%
mutate(electricityUrbanInteraction = electricityConsumption * Urban_population,
urbanForestInteraction = Urban_population * `Forested Area (%)`)
# Refit the linear regression model without outliers
co2_model <- lm(MtCO2_Emissions ~ electricityConsumption + Urban_population + `Forested Area (%)` +
electricityUrbanInteraction + urbanForestInteraction, data = model_data)
# Add fitted values to the data
model_data$fitted_values <- fitted(co2_model)
# Remove outliers based on fitted values (predicted CO2 emissions)
model_data_filtered <- model_data %>%
filter(fitted_values <= 500)
# Visualize the fit of the model using the cleaned data
ggplot(model_data_filtered, aes(x = fitted_values, y = MtCO2_Emissions)) +
geom_point() +
geom_smooth(method = "lm", color = "blue") +
labs(x = "Predicted CO2 Emissions", y = "Actual CO2 Emissions", title = "Fit of the Linear Regression Model after Additional Outlier Removal")
# Load necessary libraries
library(caret)  # For model training and evaluation
# Assuming 'model_data' is your dataset prepared for modeling
# Step 1: Split the data into training and testing sets
set.seed(123)  # For reproducibility
trainIndex <- createDataPartition(model_data$MtCO2_Emissions, p = 0.8,
list = FALSE,
times = 1)
trainData <- model_data[trainIndex, ]
testData <- model_data[-trainIndex, ]
# Step 2: Train the model on the training set
trained_model <- lm(MtCO2_Emissions ~ electricityConsumption + Urban_population + `Forested Area (%)` +
electricityUrbanInteraction + urbanForestInteraction,
data = trainData)
# Step 3: Test the model on the testing set
testData$predictions <- predict(trained_model, newdata = testData)
# Step 4: Evaluate the model
# Calculate RMSE (Root Mean Square Error)
rmse <- sqrt(mean((testData$predictions - testData$MtCO2_Emissions)^2))
cat("RMSE on test data:", rmse, "\n")
# Calculate R-squared on test data
SST <- sum((testData$MtCO2_Emissions - mean(testData$MtCO2_Emissions))^2)
SSE <- sum((testData$predictions - testData$MtCO2_Emissions)^2)
r_squared <- 1 - SSE/SST
cat("R-squared on test data:", r_squared, "\n")
# Step 5: Visualize the performance on the test set
ggplot(testData, aes(x = predictions, y = MtCO2_Emissions)) +
geom_point() +
geom_smooth(method = "lm", color = "blue") +
labs(x = "Predicted CO2 Emissions", y = "Actual CO2 Emissions",
title = "Model Performance on Test Data")
rows <- nrow(merged_data)
columns <- ncol(merged_data)
cat("Number of rows:", rows, "\n")
cat("Number of columns:", columns, "\n")
library(dplyr)
library(tidyr)
library(ggplot2)
library(tidyverse)
library(stats)
library(readr)
countryInfo <- read_delim("data/world-data-2023.csv")
countryInfoSelect <- countryInfo %>%
select(Country, `Density
(P/Km2)`, `Agricultural Land( %)`, `Land Area(Km2)`, `Birth Rate`, `Fertility Rate`, `Forested Area (%)`, `Infant mortality`, Population, Urban_population)
electricity <- read_delim("data/Global Electricity Statistics.csv")
electricity$Country <- trimws(electricity$Country)
options(scipen = 999)
electricitySelect <- electricity %>%
filter(Features == "net consumption") %>%
rename("electricityConsumption" = "2021")
electricitySelect$electricityConsumption <- as.numeric(electricitySelect$electricityConsumption)
electricitySelect <- electricitySelect %>%
select(Country, electricityConsumption)
airQuality <- read_delim("data/AQI and Lat Long of Countries.csv")
airQualitySelect <- airQuality %>%
group_by(Country) %>%
summarize(avgAirQuality = mean(`AQI Value`, na.rm = TRUE))
mtCo2 <- read_delim("data/GCB2023v43_MtCO2_flat.csv")
mtCo2Select <- mtCo2 %>%
group_by(Country) %>%
filter(Year == "2022") %>%
rename("MtCO2_Emissions" = "Total") %>%
select(Country, MtCO2_Emissions)
merged_data <- merge(x = countryInfoSelect, y = airQualitySelect, by = "Country", all = TRUE)
merged_data <- merge(x = merged_data, y = mtCo2Select, by = "Country", all = TRUE)
merged_data <- merge(x = merged_data, y = electricitySelect, by = "Country", all = TRUE)
merged_data %>%
select(-`Land Area(Km2)`, -`Birth Rate`, - `Density
(P/Km2)`, -`Infant mortality`) %>%
head(5)
countryData <- read_delim("data/merged_data.csv")
countryData$MtCO2_percapita <-(countryData$MtCO2_Emissions * 1000000) / countryData$Population
countryData %>%
mutate(ForestedAreaDec = ifelse(is.na(`Forested Area (%)`), NA, as.numeric(sub("%", "", `Forested Area (%)`)))) %>%
ggplot(aes(x = ForestedAreaDec , y = avgAirQuality,
col = cut(avgAirQuality, breaks = c(0, 50, 100, 150, 200, 300, Inf), include.lowest = FALSE),
alpha = 0.8,
size = Population)) +
geom_point() +
scale_color_manual(values = c("#8cc33e",
"#fec922",
"#fd7503",
"#ff0305",
"#a8004c",
"#7c021d"),
labels = c("Good",
"Moderate",
"Unhealthy for \nSensitive Groups",
"Unhealthy",
"Very Unhealthy",
"Hazardous")) +
scale_size_continuous(breaks = c(30000000, 100000000, 300000000, 500000000, 1000000000),
labels = c("30M", "100M", "300M", "500M", "1B"),
range = c(2, 6)) +
geom_smooth(method = "lm", se = FALSE, aes(group = 1), col = "grey12", linetype = 4) +
labs(x = "Forested Area (%)", y = "Average Air Quality (aqi)", title = "Forested Area vs Air Quality \nfor Different Countries", col = "Air Quality Index", size = "Population") +
guides(alpha=FALSE, size = guide_legend(override.aes = list(linetype = 0)),
color = guide_legend(override.aes = list(color = c("#8cc33e",
"#fec922",
"#fd7503",
"#ff0305",
"#a8004c",
"#7c021d")))) +
theme_minimal()
countryDataTemp <- countryData %>%
mutate(ForestedAreaDec = ifelse(is.na(`Forested Area (%)`), NA, as.numeric(sub("%", "", `Forested Area (%)`))))
cor1 <- cor(countryDataTemp$ForestedAreaDec, countryData$avgAirQuality, use = "complete.obs")
cat("The correlation between these two variables is ", cor1, ".", " That is a moderate negative linear relationship.", sep = "")
maxEC <- max(countryData$electricityConsumption, na.rm = TRUE)
minEC <- min(countryData$electricityConsumption, na.rm = TRUE)
countryData %>%
ggplot(aes(x = (electricityConsumption / Population) * 1000000, y = MtCO2_percapita,
alpha = 0.8,)) +
geom_point() +
geom_smooth(method = "lm", se=FALSE, col="red", linetype = 4) +
scale_x_log10() +
scale_y_log10() +
labs(x = "Net Electricity Consumption per capita (BkWh/person)", y = "CO2 Emissions per capita (tCO2/person)",
title = "Electricity Consumption per capita vs CO2 Emissions per capita \nfor Different Countries") +
guides(alpha=FALSE) +
theme_minimal()
cor2 <- cor(countryData$electricityConsumption / countryData$Population, countryData$MtCO2_percapita, use = "complete.obs")
cat("The correlation between these two variables is ", cor2, ".", " That is a relatively strong positive linear relationship.", sep = "")
countryData %>%
mutate(popRatio = Urban_population/Population) %>%
ggplot(aes(x = popRatio * 100, y = MtCO2_percapita,
alpha = 0.8)) +
geom_point(size = 2) +
geom_smooth(method = "lm", se=FALSE, col="red", linetype = 4) +
scale_x_log10() +
scale_y_log10() +
labs(x = "Urban Population (%)", y = "CO2 Emissions per capita (tCO2/person)",
title = "Urban Population vs CO2 Emissions per capita \nfor Different Countries") +
guides(alpha=FALSE) +
theme_minimal()
cor3 <- cor(countryData$Urban_population / countryData$Population , countryData$MtCO2_percapita, use = "complete.obs")
cat("The correlation between these two variables is ", cor3, ".", " That is a moderate positive linear relationship.", sep = "")
countryData %>%
ggplot(aes(x = MtCO2_percapita , y = `Fertility Rate`,
alpha = 0.8)) +
geom_point(size = 2) +
geom_smooth(method = "lm", se = FALSE, col = "red", linetype = 4) +
scale_y_log10() +
scale_x_log10() +
labs(x = "CO2 Emissions per capita (MtCO2/person)", y = "Fertility Rate (children per woman)",
title = "CO2 Emissions per capita vs Fertitility Rate \nfor Different Countries") +
guides(alpha=FALSE) +
theme_minimal()
cor4 <- cor(countryData$MtCO2_percapita , countryData$`Fertility Rate`, use = "complete.obs")
cat("The correlation between these two variables is ", cor4, ".", " That is a moderate negative linear relationship.", sep = "")
# Creating a new dataset for model preparation
model_data <- merged_data %>%
# Convert percentage strings to numeric
mutate(`Forested Area (%)` = as.numeric(gsub("%", "", `Forested Area (%)`)) / 100,
electricityConsumption = as.numeric(electricityConsumption),
Urban_population = as.numeric(Urban_population)) %>%
# Handle missing data with median imputation for columns used in the model
mutate_at(vars(electricityConsumption, Urban_population, `Forested Area (%)`),
~ ifelse(is.na(.), median(., na.rm = TRUE), .)) %>%
# Drop rows where the target variable is missing
drop_na(MtCO2_Emissions) %>%
# Remove the specific outlier with MtCO2_Emissions > 5000
filter(MtCO2_Emissions <= 500)
# Create interaction terms
model_data <- model_data %>%
mutate(electricityUrbanInteraction = electricityConsumption * Urban_population,
urbanForestInteraction = Urban_population * `Forested Area (%)`)
# Refit the linear regression model without outliers
co2_model <- lm(MtCO2_Emissions ~ electricityConsumption + Urban_population + `Forested Area (%)` +
electricityUrbanInteraction + urbanForestInteraction, data = model_data)
# Add fitted values to the data
model_data$fitted_values <- fitted(co2_model)
# Remove outliers based on fitted values (predicted CO2 emissions)
model_data_filtered <- model_data %>%
filter(fitted_values <= 500)
# Visualize the fit of the model using the cleaned data
ggplot(model_data_filtered, aes(x = fitted_values, y = MtCO2_Emissions)) +
geom_point() +
geom_smooth(method = "lm", color = "blue") +
labs(x = "Predicted CO2 Emissions", y = "Actual CO2 Emissions", title = "Fit of the Linear Regression Model after Additional Outlier Removal")
# Load necessary libraries
library(caret)  # For model training and evaluation
# Assuming 'model_data' is your dataset prepared for modeling
# Step 1: Split the data into training and testing sets
set.seed(123)  # For reproducibility
trainIndex <- createDataPartition(model_data$MtCO2_Emissions, p = 0.8,
list = FALSE,
times = 1)
trainData <- model_data[trainIndex, ]
testData <- model_data[-trainIndex, ]
# Step 2: Train the model on the training set
trained_model <- lm(MtCO2_Emissions ~ electricityConsumption + Urban_population + `Forested Area (%)` +
electricityUrbanInteraction + urbanForestInteraction,
data = trainData)
# Step 3: Test the model on the testing set
testData$predictions <- predict(trained_model, newdata = testData)
# Step 4: Evaluate the model
# Calculate RMSE (Root Mean Square Error)
rmse <- sqrt(mean((testData$predictions - testData$MtCO2_Emissions)^2))
cat("RMSE on test data:", rmse, "\n")
# Calculate R-squared on test data
SST <- sum((testData$MtCO2_Emissions - mean(testData$MtCO2_Emissions))^2)
SSE <- sum((testData$predictions - testData$MtCO2_Emissions)^2)
r_squared <- 1 - SSE/SST
cat("R-squared on test data:", r_squared, "\n")
# Step 5: Visualize the performance on the test set
ggplot(testData, aes(x = predictions, y = MtCO2_Emissions)) +
geom_point() +
geom_smooth(method = "lm", color = "blue") +
labs(x = "Predicted CO2 Emissions", y = "Actual CO2 Emissions",
title = "Model Performance on Test Data")
library(dplyr)
library(tidyr)
library(ggplot2)
library(tidyverse)
library(stats)
library(readr)
countryInfo <- read_delim("data/world-data-2023.csv")
countryInfoSelect <- countryInfo %>%
select(Country, `Density
(P/Km2)`, `Agricultural Land( %)`, `Land Area(Km2)`, `Birth Rate`, `Fertility Rate`, `Forested Area (%)`, `Infant mortality`, Population, Urban_population)
electricity <- read_delim("data/Global Electricity Statistics.csv")
electricity$Country <- trimws(electricity$Country)
options(scipen = 999)
electricitySelect <- electricity %>%
filter(Features == "net consumption") %>%
rename("electricityConsumption" = "2021")
electricitySelect$electricityConsumption <- as.numeric(electricitySelect$electricityConsumption)
electricitySelect <- electricitySelect %>%
select(Country, electricityConsumption)
airQuality <- read_delim("data/AQI and Lat Long of Countries.csv")
airQualitySelect <- airQuality %>%
group_by(Country) %>%
summarize(avgAirQuality = mean(`AQI Value`, na.rm = TRUE))
mtCo2 <- read_delim("data/GCB2023v43_MtCO2_flat.csv")
mtCo2Select <- mtCo2 %>%
group_by(Country) %>%
filter(Year == "2022") %>%
rename("MtCO2_Emissions" = "Total") %>%
select(Country, MtCO2_Emissions)
merged_data <- merge(x = countryInfoSelect, y = airQualitySelect, by = "Country", all = TRUE)
merged_data <- merge(x = merged_data, y = mtCo2Select, by = "Country", all = TRUE)
merged_data <- merge(x = merged_data, y = electricitySelect, by = "Country", all = TRUE)
merged_data %>%
select(-`Land Area(Km2)`, -`Birth Rate`, - `Density
(P/Km2)`, -`Infant mortality`) %>%
head(5)
countryData <- read_delim("data/merged_data.csv")
countryData$MtCO2_percapita <-(countryData$MtCO2_Emissions * 1000000) / countryData$Population
countryData %>%
mutate(ForestedAreaDec = ifelse(is.na(`Forested Area (%)`), NA, as.numeric(sub("%", "", `Forested Area (%)`)))) %>%
ggplot(aes(x = ForestedAreaDec , y = avgAirQuality,
col = cut(avgAirQuality, breaks = c(0, 50, 100, 150, 200, 300, Inf), include.lowest = FALSE),
alpha = 0.8,
size = Population)) +
geom_point() +
scale_color_manual(values = c("#8cc33e",
"#fec922",
"#fd7503",
"#ff0305",
"#a8004c",
"#7c021d"),
labels = c("Good",
"Moderate",
"Unhealthy for \nSensitive Groups",
"Unhealthy",
"Very Unhealthy",
"Hazardous")) +
scale_size_continuous(breaks = c(30000000, 100000000, 300000000, 500000000, 1000000000),
labels = c("30M", "100M", "300M", "500M", "1B"),
range = c(2, 6)) +
geom_smooth(method = "lm", se = FALSE, aes(group = 1), col = "grey12", linetype = 4) +
labs(x = "Forested Area (%)", y = "Average Air Quality (aqi)", title = "Forested Area vs Air Quality \nfor Different Countries", col = "Air Quality Index", size = "Population") +
guides(alpha=FALSE, size = guide_legend(override.aes = list(linetype = 0)),
color = guide_legend(override.aes = list(color = c("#8cc33e",
"#fec922",
"#fd7503",
"#ff0305",
"#a8004c",
"#7c021d")))) +
theme_minimal()
countryDataTemp <- countryData %>%
mutate(ForestedAreaDec = ifelse(is.na(`Forested Area (%)`), NA, as.numeric(sub("%", "", `Forested Area (%)`))))
cor1 <- cor(countryDataTemp$ForestedAreaDec, countryData$avgAirQuality, use = "complete.obs")
cat("The correlation between these two variables is ", cor1, ".", " That is a moderate negative linear relationship.", sep = "")
maxEC <- max(countryData$electricityConsumption, na.rm = TRUE)
minEC <- min(countryData$electricityConsumption, na.rm = TRUE)
countryData %>%
ggplot(aes(x = (electricityConsumption / Population) * 1000000, y = MtCO2_percapita,
alpha = 0.8,)) +
geom_point() +
geom_smooth(method = "lm", se=FALSE, col="red", linetype = 4) +
scale_x_log10() +
scale_y_log10() +
labs(x = "Net Electricity Consumption per capita (BkWh/person)", y = "CO2 Emissions per capita (tCO2/person)",
title = "Electricity Consumption per capita vs CO2 Emissions per capita \nfor Different Countries") +
guides(alpha=FALSE) +
theme_minimal()
cor2 <- cor(countryData$electricityConsumption / countryData$Population, countryData$MtCO2_percapita, use = "complete.obs")
cat("The correlation between these two variables is ", cor2, ".", " That is a relatively strong positive linear relationship.", sep = "")
countryData %>%
mutate(popRatio = Urban_population/Population) %>%
ggplot(aes(x = popRatio * 100, y = MtCO2_percapita,
alpha = 0.8)) +
geom_point(size = 2) +
geom_smooth(method = "lm", se=FALSE, col="red", linetype = 4) +
scale_x_log10() +
scale_y_log10() +
labs(x = "Urban Population (%)", y = "CO2 Emissions per capita (tCO2/person)",
title = "Urban Population vs CO2 Emissions per capita \nfor Different Countries") +
guides(alpha=FALSE) +
theme_minimal()
cor3 <- cor(countryData$Urban_population / countryData$Population , countryData$MtCO2_percapita, use = "complete.obs")
cat("The correlation between these two variables is ", cor3, ".", " That is a moderate positive linear relationship.", sep = "")
countryData %>%
ggplot(aes(x = MtCO2_percapita , y = `Fertility Rate`,
alpha = 0.8)) +
geom_point(size = 2) +
geom_smooth(method = "lm", se = FALSE, col = "red", linetype = 4) +
scale_y_log10() +
scale_x_log10() +
labs(x = "CO2 Emissions per capita (MtCO2/person)", y = "Fertility Rate (children per woman)",
title = "CO2 Emissions per capita vs Fertitility Rate \nfor Different Countries") +
guides(alpha=FALSE) +
theme_minimal()
cor4 <- cor(countryData$MtCO2_percapita , countryData$`Fertility Rate`, use = "complete.obs")
cat("The correlation between these two variables is ", cor4, ".", " That is a moderate negative linear relationship.", sep = "")
# Step 1: Create a simple linear regression model using key predictors
simple_model <- lm(MtCO2_Emissions ~ electricityConsumption + Urban_population + `Forested Area (%)`,
data = model_data)
# Step 1: Create a simple linear regression model using key predictors
simple_model <- lm(MtCO2_Emissions ~ electricityConsumption + Urban_population + `Forested Area (%)`,
data = merged_data)
# Step 2: Print summary of the model to view coefficients, R-squared, etc.
summary(simple_model)
# Step 3: Add fitted values (predicted CO2 emissions) to the dataset
merged_data$fitted_values_simple <- fitted(simple_model)
# Step 1: Handle missing values by removing rows with NA in relevant columns
merged_data_clean <- merged_data %>%
drop_na(electricityConsumption, Urban_population, `Forested Area (%)`, MtCO2_Emissions)
# Step 2: Create a simple linear regression model using key predictors
simple_model <- lm(MtCO2_Emissions ~ electricityConsumption + Urban_population + `Forested Area (%)`,
data = merged_data_clean)
# Step 3: Print summary of the model to view coefficients, R-squared, etc.
summary(simple_model)
# Step 4: Add fitted values (predicted CO2 emissions) to the cleaned dataset
merged_data_clean$fitted_values_simple <- fitted(simple_model)
# Step 5: Visualize the fit of the simple linear regression model
ggplot(merged_data_clean, aes(x = fitted_values_simple, y = MtCO2_Emissions)) +
geom_point() +
geom_smooth(method = "lm", color = "blue") +
labs(x = "Predicted CO2 Emissions", y = "Actual CO2 Emissions",
title = "Fit of the Simple Linear Regression Model")
library(caret)  # For data splitting and evaluation
library(dplyr)
library(tidyr)
library(ggplot2)
library(tidyverse)
library(stats)
library(readr)
library(caret)  # For data splitting and evaluation
# Load necessary libraries
# Step 1: Handle missing values by removing rows with NA in relevant columns
merged_data_clean <- merged_data %>%
drop_na(electricityConsumption, Urban_population, `Forested Area (%)`, MtCO2_Emissions)
# Step 2: Split the data into training and testing sets (80% training, 20% testing)
set.seed(123)  # For reproducibility
trainIndex <- createDataPartition(merged_data_clean$MtCO2_Emissions, p = 0.8, list = FALSE)
trainData <- merged_data_clean[trainIndex, ]
testData <- merged_data_clean[-trainIndex, ]
# Step 3: Create a simple linear regression model using training data
simple_model <- lm(MtCO2_Emissions ~ electricityConsumption + Urban_population + `Forested Area (%)`,
data = trainData)
# Step 4: Print summary of the model to view coefficients, R-squared, etc.
summary(simple_model)
# Step 5: Add predicted values (fitted values) to the test dataset
testData$predicted_values <- predict(simple_model, newdata = testData)
# Step 1: Clean the data and convert 'Forested Area (%)' to numeric
merged_data_clean <- merged_data %>%
mutate(`Forested Area (%)` = as.numeric(gsub("%", "", `Forested Area (%)`)) / 100) %>%
drop_na(electricityConsumption, Urban_population, `Forested Area (%)`, MtCO2_Emissions)
# Step 2: Split the data into training and testing sets (80% training, 20% testing)
set.seed(123)  # For reproducibility
trainIndex <- createDataPartition(merged_data_clean$MtCO2_Emissions, p = 0.8, list = FALSE)
train_data <- merged_data_clean[trainIndex, ]
test_data <- merged_data_clean[-trainIndex, ]
# Step 3: Train the linear regression model on the training set
simple_model <- lm(MtCO2_Emissions ~ electricityConsumption + Urban_population + `Forested Area (%)`,
data = train_data)
# Step 4: Print summary of the model to view coefficients, R-squared, etc.
summary(simple_model)
# Step 5: Make predictions on the test set
test_data$predictions <- predict(simple_model, newdata = test_data)
# Step 6: Evaluate model performance on the test set
rmse <- sqrt(mean((test_data$predictions - test_data$MtCO2_Emissions)^2))  # Root Mean Square Error
r_squared <- 1 - (sum((test_data$predictions - test_data$MtCO2_Emissions)^2) /
sum((test_data$MtCO2_Emissions - mean(test_data$MtCO2_Emissions))^2))
cat("RMSE on test data:", rmse, "\n")
cat("R-squared on test data:", r_squared, "\n")
# Step 7: Visualize the fit of the model on the test data
ggplot(test_data, aes(x = predictions, y = MtCO2_Emissions)) +
geom_point() +
geom_smooth(method = "lm", color = "blue") +
labs(x = "Predicted CO2 Emissions", y = "Actual CO2 Emissions",
title = "Model Performance on Test Data")
